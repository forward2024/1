@page "/"
@inject NoteManager NoteManager
@inject SearchService SearchService

<PageTitle>Notebook</PageTitle>

<div class="container">
    <div class="header">
        <button @onclick="OpenCreateModal" class="note-add">New note</button>
        <input @oninput="OnSearchInput" type="text" placeholder="Enter search term" class="search-input">
        <div class=" total-notes">Total notes: @NoteManager.Current.Count
        </div>
    </div>

    <div class="notes-list">
        @if (!string.IsNullOrEmpty(currentSearchTerm) && currentSearchTerm.Length >= 3)
        {
            @if (SearchResults.Any())
            {
                @foreach (var note in SearchResults)
                {
                    <div class="note-item" @onclick="() => ToggleNoteContentVisibility(note.Id)">
                        <div class="note-info">
                            <div class="note-title">@note.Title</div>
                            <small class="note-data">@FormatDate(note.DateCreated)</small>
                            <div class="note-footer">
                                <button class="edit-note-btn" @onclick:stopPropagation="true"
                                    @onclick="() => OpenEditModal(note)">Edit note
                                </button>
                                <button class="remove-note-btn" @onclick:stopPropagation="true"
                                    @onclick="() => RemoveNote(note.Id)">Remove note
                                </button>
                            </div>
                        </div>
                        <div class="container-note-content">
                            @if (noteVisibility.TryGetValue(note.Id, out var isVisible) && isVisible)
                            {
                                @if (!string.IsNullOrWhiteSpace(note.Content))
                                {
                                    <div class="note-content visible">@note.Content</div>
                                }
                                else
                                {
                                    <div class="note-content visible">Контент нотатки пустий.</div>
                                }
                            }
                            else
                            {
                                @if (!string.IsNullOrWhiteSpace(note.Content))
                                {
                                    <div class="note-content">@note.Content</div>
                                }
                                else
                                {
                                    <div class="note-content">Контент нотатки пустий.</div>
                                }
                            }
                        </div>
                    </div>
                }
            }
            else
            {
                <div style="display: flex; justify-content: center;">Інформації не має</div>
            }
        }
        else
        {
            @foreach (var note in NoteManager.Current)
            {
                <div class="note-item" @onclick="() => ToggleNoteContentVisibility(note.Id)">
                    <div class="note-info">
                        <div class="note-title">@note.Title</div>
                        <small class="note-data">@FormatDate(note.DateCreated)</small>
                        <div class="note-footer">
                            <button class="edit-note-btn" @onclick:stopPropagation="true"
                                @onclick="() => OpenEditModal(note)">Edit note
                            </button>
                            <button class="remove-note-btn" @onclick:stopPropagation="true"
                                @onclick="() => RemoveNote(note.Id)">Remove note
                            </button>
                        </div>
                    </div>
                    <div class="container-note-content">
                        @if (noteVisibility.TryGetValue(note.Id, out var isVisible) && isVisible)
                        {
                            @if (!string.IsNullOrWhiteSpace(note.Content))
                            {
                                <div class="note-content visible">@note.Content</div>
                            }
                            else
                            {
                                <div class="note-content visible">Контент нотатки пустий.</div>
                            }
                        }
                        else
                        {
                            @if (!string.IsNullOrWhiteSpace(note.Content))
                            {
                                <div class="note-content">@note.Content</div>
                            }
                            else
                            {
                                <div class="note-content">Контент нотатки пустий.</div>
                            }
                        }
                    </div>
                </div>
            }
        }
    </div>
</div>

@if (isModalOpen)
{
    <div class="modal-overlay" @onclick="CloseModal">
    <div class="modal1" @onclick:stopPropagation>>
        <div class="modal1-header">
            <h3>@(editingNote.Id == Guid.Empty ? "Create New Note" : "Edit Note")</h3>
            <button @onclick="CloseModal">X</button>
        </div>
        <div class="modal1-body">
            <EditForm Model="editingNote" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group">
                    <label for="title">Title:</label>
                    <InputText id="title" @bind-Value="editingNote.Title" />
                </div>
                <div class="form-group">
                    <label for="content">Content:</label>
                    <InputTextArea id="content" @bind-Value="editingNote.Content" />
                </div>
                <button type="submit" class="btn btn-primary">@("Save")</button>
            </EditForm>
        </div>
    </div>
</div>
}


@code {
    private bool isModalOpen = false;
    private Note editingNote = new();

    private void OpenCreateModal()
    {
        editingNote = new Note();
        isModalOpen = true;
    }

    private void OpenEditModal(Note note)
    {
        editingNote = new Note
            {
                Id = note.Id,
                Title = note.Title,
                Content = note.Content,
                DateCreated = note.DateCreated
            };
        isModalOpen = true;
    }

    private void HandleValidSubmit()
    {
        if (editingNote.Id == Guid.Empty)
        {
            editingNote.Id = Guid.NewGuid();
            NoteManager.Add(editingNote);
            NoteManager.Current.Add(editingNote);
        }
        else
        {
            var existingNote = NoteManager.Current.Find(x => x.Id == editingNote.Id);
            if (existingNote != null)
            {
                existingNote.Title = editingNote.Title;
                existingNote.Content = editingNote.Content;
                NoteManager.Edit(existingNote);
            }
        }
        CloseModal();
    }

    private void CloseModal()
    {
        isModalOpen = false;
    }

    private void RemoveNote(Guid id)
    {
        NoteManager.Remove(id);
        var item = NoteManager.Current.Find(x => x.Id == id);
        NoteManager.Current.Remove(item);
    }

    private string FormatDate(DateTime date)
    {
        var diff = DateTime.UtcNow - date;
        if (diff.TotalDays >= 1)
        {
            return $"{(int)diff.TotalDays} дні(в) тому";
        }
        else if (diff.TotalHours >= 1)
        {
            return $"{(int)diff.TotalHours} годин(и) тому";
        }
        else if (diff.TotalMinutes >= 1)
        {
            return $"{(int)diff.TotalMinutes} хвилин(и) тому";
        }
        else
        {
            return "Щойно";
        }
    }

    private Dictionary<Guid, bool> noteVisibility = new Dictionary<Guid, bool>();

    private void ToggleNoteContentVisibility(Guid noteId)
    {
        if (!noteVisibility.ContainsKey(noteId))
        {
            noteVisibility[noteId] = true;
        }
        else
        {
            noteVisibility[noteId] = !noteVisibility[noteId];
        }
        StateHasChanged();
    }

    private string currentSearchTerm = string.Empty;
    private List<Note> SearchResults = new();
    private void OnSearchInput(ChangeEventArgs e)
    {
        currentSearchTerm = e.Value?.ToString() ?? string.Empty;
        if (currentSearchTerm.Split(new[] { ' ', '.', ',', '!', '?' }, StringSplitOptions.RemoveEmptyEntries).Any(word =>
        word.Length >= 3))
        {
            SearchResults = SearchService.Search(currentSearchTerm);
        }
        else
        {
            SearchResults.Clear();
        }
        StateHasChanged();
    }
}